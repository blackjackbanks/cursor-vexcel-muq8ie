# Core Service Helm Values Configuration
# Version: 1.0.0

# Image configuration
image:
  repository: core-service
  tag: latest
  pullPolicy: IfNotPresent

# Service name configuration
nameOverride: ""
fullnameOverride: ""

# Replica configuration
replicaCount: 3

# Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 256Mi

# Horizontal Pod Autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 6
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Service configuration
service:
  type: ClusterIP
  port: 3000
  targetPort: 3000

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "8m"
  hosts:
    - host: core-service.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: core-service-tls
      hosts:
        - core-service.local

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
    path: /metrics
    metricRelabelings:
      - sourceLabels: ["__name__"]
        regex: node_cpu.*
        action: keep
  prometheusRule:
    enabled: true
    rules:
      - alert: CoreServiceHighCPU
        expr: avg(container_cpu_usage_seconds_total{container='core-service'}) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          description: Core Service CPU usage above 80% for 5 minutes
          summary: High CPU Usage Alert
      - alert: CoreServiceHighMemory
        expr: avg(container_memory_usage_bytes{container='core-service'}) > 900Mi
        for: 5m
        labels:
          severity: warning
        annotations:
          description: Core Service memory usage above 900Mi for 5 minutes
          summary: High Memory Usage Alert
      - alert: CoreServiceHighLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{service='core-service'}[5m])) > 2
        for: 5m
        labels:
          severity: critical
        annotations:
          description: 95th percentile latency above 2 seconds for 5 minutes
          summary: High Latency Alert

# Health check probes
livenessProbe:
  httpGet:
    path: /health/live
    port: http
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  httpGet:
    path: /health/ready
    port: http
  initialDelaySeconds: 15
  periodSeconds: 20
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  httpGet:
    path: /health/startup
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1

# Environment variables
env:
  NODE_ENV: production
  PORT: "3000"
  API_PREFIX: /api/v1
  LOG_LEVEL: info
  METRICS_ENABLED: "true"

# Pod security context
podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

# Container security context
containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  capabilities:
    drop:
      - ALL

# Pod anti-affinity for high availability
podAntiAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
            - key: app
              operator: In
              values:
                - core-service
        topologyKey: kubernetes.io/hostname