# API Gateway Service Helm Values v1.0.0
# Configures deployment, networking, security, and monitoring for the gateway service

# Image configuration
image:
  repository: gateway-service
  tag: latest
  pullPolicy: IfNotPresent

# Service name overrides
nameOverride: ""
fullnameOverride: ""

# Deployment configuration
replicaCount: 3
revisionHistoryLimit: 5

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  metrics:
    port: 9090
    name: metrics

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
  hosts:
    - host: api.excel-addin.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: gateway-tls
      hosts:
        - api.excel-addin.com

# Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Horizontal Pod Autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 2
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Pods
          value: 1
          periodSeconds: 120

# Node selector and affinity
nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - gateway-service
          topologyKey: kubernetes.io/hostname

# Security context
podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 20
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Environment variables
env:
  NODE_ENV: production
  PORT: "8080"
  AI_SERVICE_URL: http://ai-service:3001
  CORE_SERVICE_URL: http://core-service:3002
  DATA_SERVICE_URL: http://data-service:3003

# NGINX configuration
configmap:
  nginx:
    worker_processes: auto
    worker_connections: "1024"
    keepalive_timeout: "65"
    client_max_body_size: "50M"
    ssl_protocols: "TLSv1.2 TLSv1.3"
    ssl_ciphers: "HIGH:!aNULL:!MD5"
    ssl_prefer_server_ciphers: "on"
    ssl_session_timeout: "1d"
    ssl_session_cache: "shared:SSL:50m"
    ssl_session_tickets: "off"

# Prometheus ServiceMonitor configuration
serviceMonitor:
  enabled: true
  path: /metrics
  port: metrics
  interval: "15s"
  scrapeTimeout: "10s"
  labels:
    release: prometheus
  endpoints:
    - port: metrics
      path: /metrics
      interval: "15s"
      scrapeTimeout: "10s"
  metricRelabelings:
    - sourceLabels: ["__name__"]
      regex: "nginx_.*"
      action: "keep"